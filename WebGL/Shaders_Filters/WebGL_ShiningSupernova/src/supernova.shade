
#define SPEED       (1.0 / 80.0)
#define SMOOTH_DIST 0.6

#define PI 3.14159265359

uniform highp vec3      iResolution;           // viewport resolution (in pixels)
uniform highp float     iGlobalTime;           // shader playback time (in seconds)
uniform highp float     iTimeDelta;            // render time (in seconds)
uniform int             iFrame;                // shader playback frame
uniform highp float     iChannelTime[4];       // channel playback time (in seconds)
uniform highp vec3      iChannelResolution[4]; // channel resolution (in pixels)
uniform highp vec4      iMouse;                // mouse pixel coords. xy: current (if MLB down), zw: click
uniform sampler2D       iChannel0;             // input channel. XX = 2D/Cube
uniform highp vec4      iDate;                 // (year, month, day, time in seconds)
uniform highp float     iSampleRate;           // sound sample rate (i.e., 44100)

//out highp vec4 fragColor, in highp vec2 fragCoord

void main( )
{

    highp vec2 fragCoord = vec2(3,4);

    // set up our coordinate system
    highp float aspectRatio = iResolution.x / iResolution.y;
    highp vec2 uv = ((fragCoord.xy / iResolution.xy) - vec2(0.5,0.5));
    uv.x *= aspectRatio;

	// get our distance and angle
    highp float dist = length(uv);
    highp float angle = (atan(uv.y, uv.x) + PI) / (2.0 * PI);

   	// texture lookup
    highp vec3 textureDist;
    textureDist  = texture2D(iChannel0, vec2(iGlobalTime * SPEED, angle)).xyz;

    highp vec3 normal = texture2D(iChannel0, uv).xyz;

    // manipulate distance
    textureDist *= 0.4;
    textureDist += 0.5;

    // set RGB
	highp vec3 color = vec3(0.0,0.0,0.0);

    if (dist < textureDist.x)
        color.x += smoothstep(0.0,SMOOTH_DIST, textureDist.x - dist);

    if (dist < textureDist.y)
        color.y += smoothstep(0.0,SMOOTH_DIST, textureDist.y - dist);

    if (dist < textureDist.z)
        color.z += smoothstep(0.0,SMOOTH_DIST, textureDist.z - dist);

    // add a background grid
    //if (fract(mod(uv.x,0.1)) < 0.005 || fract(mod(uv.y,0.1)) < 0.005)
    //    color.y += 0.5;
    //else
    //    color.y += 0.1;

    // set final color
	//fragColor = vec4(color + normal,1.0);
}